// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Properties;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace NYCZR8127AlternateHeightAndSetbackRegulationsDaylightEvaluation
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class NYCZR8127AlternateHeightAndSetbackRegulationsDaylightEvaluationInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public NYCZR8127AlternateHeightAndSetbackRegulationsDaylightEvaluationInputs(IList<VantageStreets> @vantageStreets, bool @qualifyForEastMidtownSubdistrict, bool @debugVisualization, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<NYCZR8127AlternateHeightAndSetbackRegulationsDaylightEvaluationInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @vantageStreets, @qualifyForEastMidtownSubdistrict, @debugVisualization});
            }
        
            this.VantageStreets = @vantageStreets;
            this.QualifyForEastMidtownSubdistrict = @qualifyForEastMidtownSubdistrict;
            this.DebugVisualization = @debugVisualization;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>A list of vantage streets to calculate for</summary>
        [Newtonsoft.Json.JsonProperty("Vantage Streets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<VantageStreets> VantageStreets { get; set; }
    
        /// <summary>Whether your site is subject to the height and setback modifications specified in section 81-663. Modifications made: - Daylight blockage will be calculated at the intersection of 150' height projected downward, and using the input building from 150' upward. - There will be no encroachment penalty - Daylight credit will be given even if street continuity is on.</summary>
        [Newtonsoft.Json.JsonProperty("Qualify for East Midtown Subdistrict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool QualifyForEastMidtownSubdistrict { get; set; }
    
        /// <summary>Visualize raw plan and section angles, rather than curved projections on a modified vertical scale.</summary>
        [Newtonsoft.Json.JsonProperty("Debug Visualization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DebugVisualization { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A vantage street for calculation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VantageStreets 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VantageStreets(string @name, Line @line, VantageStreetsWidth @width, bool @streetWallContinuity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VantageStreets>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @line, @width, @streetWallContinuity});
            }
        
            this.Name = @name;
            this.Line = @line;
            this.Width = @width;
            this.StreetWallContinuity = @streetWallContinuity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Name of your vantage street</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; } = "Unknown";
    
        /// <summary>A line representing your vantage street, touching the lot line.</summary>
        [Newtonsoft.Json.JsonProperty("Line", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Line Line { get; set; }
    
        /// <summary>Width of your vantage street</summary>
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VantageStreetsWidth Width { get; set; } = VantageStreetsWidth._60ft;
    
        /// <summary>Whether your vantage street is on a street designated in the zoning code as 'desired street wall continuity.' See Section 81-43: https://zr.planning.nyc.gov/article-viii/chapter-1#81-43.</summary>
        [Newtonsoft.Json.JsonProperty("Street Wall Continuity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StreetWallContinuity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum VantageStreetsWidth
    {
        [System.Runtime.Serialization.EnumMember(Value = @"60ft")]
        _60ft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"75ft")]
        _75ft = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"80ft")]
        _80ft = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"100ft")]
        _100ft = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"140ft (Park Avenue)")]
        _140ft__Park_Avenue_ = 4,
    
    }
}